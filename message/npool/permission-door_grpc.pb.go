// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnubisClient is the client API for Anubis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnubisClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	//
	//Set policies to Role.
	SetRolePolicies(ctx context.Context, in *SetRolePoliciesRequest, opts ...grpc.CallOption) (*SetRolePoliciesResponse, error)
	//
	//Authenticate Role permission.
	AuthenticateRolePolicy(ctx context.Context, in *AuthenticateRolePolicyRequest, opts ...grpc.CallOption) (*AuthenticateRolePolicyResponse, error)
	AuthenticateRolesPolicy(ctx context.Context, in *AuthenticateRolesPolicyRequest, opts ...grpc.CallOption) (*AuthenticateRolesPolicyResponse, error)
	//
	//Get all policies of role.
	GetRolePolicies(ctx context.Context, in *GetRolePoliciesRequest, opts ...grpc.CallOption) (*GetRolePoliciesResponse, error)
	//
	//Cancel some policies of role.
	UnsetRolePolicies(ctx context.Context, in *UnsetRolePoliciesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	//Delete data of role.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	//
	//Delete resources.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type anubisClient struct {
	cc grpc.ClientConnInterface
}

func NewAnubisClient(cc grpc.ClientConnInterface) AnubisClient {
	return &anubisClient{cc}
}

func (c *anubisClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) SetRolePolicies(ctx context.Context, in *SetRolePoliciesRequest, opts ...grpc.CallOption) (*SetRolePoliciesResponse, error) {
	out := new(SetRolePoliciesResponse)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/SetRolePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) AuthenticateRolePolicy(ctx context.Context, in *AuthenticateRolePolicyRequest, opts ...grpc.CallOption) (*AuthenticateRolePolicyResponse, error) {
	out := new(AuthenticateRolePolicyResponse)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/AuthenticateRolePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) AuthenticateRolesPolicy(ctx context.Context, in *AuthenticateRolesPolicyRequest, opts ...grpc.CallOption) (*AuthenticateRolesPolicyResponse, error) {
	out := new(AuthenticateRolesPolicyResponse)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/AuthenticateRolesPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) GetRolePolicies(ctx context.Context, in *GetRolePoliciesRequest, opts ...grpc.CallOption) (*GetRolePoliciesResponse, error) {
	out := new(GetRolePoliciesResponse)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/GetRolePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) UnsetRolePolicies(ctx context.Context, in *UnsetRolePoliciesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/UnsetRolePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anubisClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/anubis.v1.Anubis/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnubisServer is the server API for Anubis service.
// All implementations must embed UnimplementedAnubisServer
// for forward compatibility
type AnubisServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	//
	//Set policies to Role.
	SetRolePolicies(context.Context, *SetRolePoliciesRequest) (*SetRolePoliciesResponse, error)
	//
	//Authenticate Role permission.
	AuthenticateRolePolicy(context.Context, *AuthenticateRolePolicyRequest) (*AuthenticateRolePolicyResponse, error)
	AuthenticateRolesPolicy(context.Context, *AuthenticateRolesPolicyRequest) (*AuthenticateRolesPolicyResponse, error)
	//
	//Get all policies of role.
	GetRolePolicies(context.Context, *GetRolePoliciesRequest) (*GetRolePoliciesResponse, error)
	//
	//Cancel some policies of role.
	UnsetRolePolicies(context.Context, *UnsetRolePoliciesRequest) (*emptypb.Empty, error)
	//
	//Delete data of role.
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	//
	//Delete resources.
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAnubisServer()
}

// UnimplementedAnubisServer must be embedded to have forward compatible implementations.
type UnimplementedAnubisServer struct {
}

func (UnimplementedAnubisServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAnubisServer) SetRolePolicies(context.Context, *SetRolePoliciesRequest) (*SetRolePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRolePolicies not implemented")
}
func (UnimplementedAnubisServer) AuthenticateRolePolicy(context.Context, *AuthenticateRolePolicyRequest) (*AuthenticateRolePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateRolePolicy not implemented")
}
func (UnimplementedAnubisServer) AuthenticateRolesPolicy(context.Context, *AuthenticateRolesPolicyRequest) (*AuthenticateRolesPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateRolesPolicy not implemented")
}
func (UnimplementedAnubisServer) GetRolePolicies(context.Context, *GetRolePoliciesRequest) (*GetRolePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePolicies not implemented")
}
func (UnimplementedAnubisServer) UnsetRolePolicies(context.Context, *UnsetRolePoliciesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetRolePolicies not implemented")
}
func (UnimplementedAnubisServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAnubisServer) DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedAnubisServer) mustEmbedUnimplementedAnubisServer() {}

// UnsafeAnubisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnubisServer will
// result in compilation errors.
type UnsafeAnubisServer interface {
	mustEmbedUnimplementedAnubisServer()
}

func RegisterAnubisServer(s grpc.ServiceRegistrar, srv AnubisServer) {
	s.RegisterService(&Anubis_ServiceDesc, srv)
}

func _Anubis_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_SetRolePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRolePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).SetRolePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/SetRolePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).SetRolePolicies(ctx, req.(*SetRolePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_AuthenticateRolePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRolePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).AuthenticateRolePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/AuthenticateRolePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).AuthenticateRolePolicy(ctx, req.(*AuthenticateRolePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_AuthenticateRolesPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRolesPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).AuthenticateRolesPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/AuthenticateRolesPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).AuthenticateRolesPolicy(ctx, req.(*AuthenticateRolesPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_GetRolePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).GetRolePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/GetRolePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).GetRolePolicies(ctx, req.(*GetRolePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_UnsetRolePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetRolePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).UnsetRolePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/UnsetRolePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).UnsetRolePolicies(ctx, req.(*UnsetRolePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anubis_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnubisServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anubis.v1.Anubis/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnubisServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Anubis_ServiceDesc is the grpc.ServiceDesc for Anubis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anubis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anubis.v1.Anubis",
	HandlerType: (*AnubisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Anubis_Version_Handler,
		},
		{
			MethodName: "SetRolePolicies",
			Handler:    _Anubis_SetRolePolicies_Handler,
		},
		{
			MethodName: "AuthenticateRolePolicy",
			Handler:    _Anubis_AuthenticateRolePolicy_Handler,
		},
		{
			MethodName: "AuthenticateRolesPolicy",
			Handler:    _Anubis_AuthenticateRolesPolicy_Handler,
		},
		{
			MethodName: "GetRolePolicies",
			Handler:    _Anubis_GetRolePolicies_Handler,
		},
		{
			MethodName: "UnsetRolePolicies",
			Handler:    _Anubis_UnsetRolePolicies_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Anubis_DeleteRole_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Anubis_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/permission-door.proto",
}
